#!/bin/sh

# PROVIDE: boot2docker
# REQUIRE: LOGIN
# KEYWORD: nojail shutdown

. /etc/rc.subr
. /etc/network.subr

name=boot2docker
rcvar=boot2docker_enable
extra_commands="attach ssh"
attach_cmd=b2d_attach
ssh_cmd=b2d_ssh
start_cmd=b2d_start
stop_cmd=b2d_stop

load_rc_config $name

: ${boot2docker_enable:="NO"}
: ${boot2docker_dir:="/var/lib/boot2docker"}
: ${boot2docker_version:="1.5.0"}
: ${boot2docker_data_path:="${boot2docker_dir}/data.img"}
: ${boot2docker_data_size:="10G"}
: ${boot2docker_ip:="172.16.1.2::172.16.1.1:255.255.255.252:boot2docker:eth0:off:192.168.0.23:8.8.8.8"}
: ${boot2docker_mem:="2048M"}
: ${boot2docker_ncpu:="2"}
: ${boot2docker_if:="tap0"}
: ${boot2docker_vmname:="${name}"}
: ${boot2docker_flags:=""}
: ${boot2docker_kernel_args:=""}
: ${boot2docker_group:="operator"}

rundir=/var/run/${name}
pidfile=${rundir}/detachtty.pid
procname=/usr/local/bin/detachtty
required_modules=vmm

b2d_iso=%%DATADIR%%/boot2docker.iso

_b2d_wait_for()
{
    _what=$1
    _timeout=$2
    _test=$3

    info "Waiting for ${_what} (${_timeout}s)"
    while ! eval "${_test}" ; do
        sleep 1
        if ! check_pidfile $pidfile $procname ; then
            error "${name} has stopped"
            return 1
        fi
        _timeout=$((${_timeout} - 1))
        if [ ${_timeout} -gt 0 ] ; then
            debug "Still waiting for ${_what} (${_timeout}s)"
        else
            error "Timed out waiting for ${_what}"
            return 1
        fi
    done
}

b2d_has_ssh()
{
    nc -z ${boot2docker_ip%%:*} 22
}

_b2d_magic='boot2docker, please format-me'
b2d_start()
{
    if test -e /dev/vmm/${boot2docker_vmname} ; then
        error "Bhyve VM ${boot2docker_vmname} already exists"
        return 1
    fi
    
    install -d -m 0750 -o root -g ${boot2docker_group} ${boot2docker_dir} || return 1

    if test -e ${boot2docker_dir}/id_rsa ; then
        debug "SSH key pair already exists"
    else
        info "Generating SSH key pair"
        ssh-keygen -t rsa -N '' -f ${boot2docker_dir}/id_rsa || return 1
    fi

    if test -e ${boot2docker_data_path} ; then
        debug "${boot2docker_data_path} already exists"
    else
        info "Initializing data volume at ${boot2docker_data_path}"
        if echo "${boot2docker_data_path}" | grep -q '^/dev/zvol/' ; then
            zfs create -V ${boot2docker_data_size} ${boot2docker_data_path#/dev/zvol/} || return 1
        else
            truncate -s ${boot2docker_data_size} ${boot2docker_data_path} || return 1
        fi

        info "Creating userdata..."
        uddir=$(mktemp -d -t boot2docker-userdata)
        udfile=$(mktemp -t boot2docker-userdata.tar)

        echo "${_b2d_magic}" > "${uddir}/${_b2d_magic}"
        install -d -m 0700 ${uddir}/.ssh
        install -m 0644 ${boot2docker_dir}/id_rsa.pub ${uddir}/.ssh/authorized_keys
        tar -C ${uddir} -cvf ${udfile} --numeric-owner --format=ustar "${_b2d_magic}" .ssh

        info "Installing userdata..."
        dd if=${udfile} of=${boot2docker_data_path} bs=4096 conv=sync,notrunc || return 1

        rm -rf ${uddir} ${udfile}
    fi

    install -d -m 0700 ${rundir} || return 1

    cat >${rundir}/device.map <<EOF || return 1
(cd0) ${b2d_iso}
(hd0) ${boot2docker_data_path}
EOF

    cat >${rundir}/grub.cfg <<EOF || return 1
set root=(cd0,msdos1)
linux /boot/vmlinuz64 com1=9600,8n1 loglevel=3 user=docker console=ttyS0 console=tty0 noembed nomodeset norestore waitusb=10:LABEL=boot2docker-data base ip=${boot2docker_ip}${boot2docker_kernel_args:+ ${boot2docker_kernel_args}}
initrd /boot/initrd.img
boot
EOF

    debug "Running grub..."
    env TERM=dumb TZ=UTC /usr/local/sbin/grub-bhyve -e -m ${rundir}/device.map -d ${rundir} -M ${boot2docker_mem} ${boot2docker_vmname} || return 1
    
    debug "Starting bhyve..."
    env TERM=dumb TZ=UTC /usr/local/bin/detachtty \
        --dribble-file ${rundir}/detachtty.dribble \
        --log-file ${rundir}/detachtty.log \
        --pid-file ${rundir}/detachtty.pid \
        ${rundir}/detachtty.sock \
        /usr/sbin/bhyve \
        -c ${boot2docker_ncpu} -m ${boot2docker_mem} -H -P -A \
        -l com1,stdio \
        -s 0:0,hostbridge \
        -s 1:0,lpc \
        -s 2:0,virtio-net,${boot2docker_if} \
        -s 3:0,ahci-hd,${boot2docker_data_path} \
        -s 3:1,ahci-cd,${b2d_iso} \
        ${boot2docker_flags} \
        ${boot2docker_vmname} || return 1

    _b2d_wait_for ${boot2docker_if} 15 "ifconfig ${boot2docker_if} | grep -q 'Opened by PID'" || return 1
    ifn_start ${boot2docker_if} || return 1

    _b2d_wait_for SSH 15 b2d_has_ssh || return 1

    debug "Installing resolv.conf..."
    b2d_ssh sudo install -m 0644 /proc/net/pnp /etc/resolv.conf || return 1

    _b2d_wait_for certificates 15 "b2d_ssh test -d .docker" || return 1

    debug "Fetching certificates..."
    b2d_ssh tar -C '~/.docker' -c . > ${boot2docker_dir}/dot.docker.tar || return 1
    tar -C ${boot2docker_dir} -xf ${boot2docker_dir}/dot.docker.tar --no-same-owner --no-same-permissions || return 1
    rm ${boot2docker_dir}/dot.docker.tar

    echo "export DOCKER_HOST=tcp://${boot2docker_ip%%:*}:2376 DOCKER_TLS_VERIFY=1 DOCKER_CERT_PATH=${boot2docker_dir}" > ${boot2docker_dir}/profile.sh

    chown root:${boot2docker_group} ${boot2docker_dir}/*.pem ${boot2docker_dir}/profile.sh
    chmod 0640 ${boot2docker_dir}/*.pem ${boot2docker_dir}/profile.sh
}

b2d_ssh()
{
    ssh -i ${boot2docker_dir}/id_rsa -l docker ${boot2docker_ip%%:*} "${@}"
}

b2d_attach()
{
    attachtty ${rundir}/detachtty.sock
}

b2d_stop()
{
    if [ -z "$rc_pid" ]; then
	[ -n "$rc_fast" ] && return 0
	_run_rc_notrunning
	return 1
    fi

    if b2d_has_ssh ; then
        b2d_ssh sudo halt
    elif [ -e /dev/vmm/${boot2docker_vmname} ] ; then
        bhyvectl --vm=${boot2docker_vmname} --force-poweroff
    fi

    # TODO: timeout? force-kill bhyve binary? or maybe the detachtty?
    wait_for_pids $rc_pid

    if [ -e /dev/vmm/${boot2docker_vmname} ] ; then
        bhyvectl --vm=${boot2docker_vmname} --destroy
    fi
}

run_rc_command "${@}"
